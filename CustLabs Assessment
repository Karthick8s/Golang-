package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"sync"

	"github.com/gin-gonic/gin"
)

// Input structure for incoming requests
type InputData struct {
	Event           string               `json:"ev"`
	EventType       string               `json:"et"`
	AppID           string               `json:"id"`
	UserID          string               `json:"uid"`
	MessageID       string               `json:"mid"`
	PageTitle       string               `json:"t"`
	PageURL         string               `json:"p"`
	BrowserLanguage string               `json:"l"`
	ScreenSize      string               `json:"sc"`
	Attributes      map[string]Attribute `json:"attributes"`
	UserTraits      map[string]UserTrait `json:"traits"`
}

// Attribute structure for attributes in InputData
type Attribute struct {
	Value string `json:"value"`
	Type  string `json:"type"`
}

// UserTrait structure for user traits in InputData
type UserTrait struct {
	Value string `json:"value"`
	Type  string `json:"type"`
}

// Output structure for transformed data
type OutputData struct {
	Event           string               `json:"event"`
	EventType       string               `json:"event_type"`
	AppID           string               `json:"app_id"`
	UserID          string               `json:"user_id"`
	MessageID       string               `json:"message_id"`
	PageTitle       string               `json:"page_title"`
	PageURL         string               `json:"page_url"`
	BrowserLanguage string               `json:"browser_language"`
	ScreenSize      string               `json:"screen_size"`
	Attributes      map[string]Attribute `json:"attributes"`
	UserTraits      map[string]UserTrait `json:"traits"`
}

func main() {
	router := gin.Default()

	inputChan := make(chan *InputData)
	var wg sync.WaitGroup

	//worker goroutines
	for i := 0; i < 5; i++ {
		wg.Add(1)
		go worker(inputChan, &wg)
	}

	//route
	router.POST("/convert", func(c *gin.Context) {
		var inputData InputData
		if err := c.BindJSON(&inputData); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		//send input data to worker channel

		go func() {
			inputChan <- &inputData
		}()
		c.JSON(http.StatusOK, gin.H{"message": "Request Received and Processing..."})
	})

	//Run Server

	go func() {
		if err := router.Run("8080"); err != nil {
			fmt.Println("Error Starting server", err)
		}
	}()

	//wait to finish
	wg.Wait()
}

// worker function
func worker(inputChan <-chan *InputData, wg *sync.WaitGroup) {
	defer wg.Done()

	for input := range inputChan {
		output := transformData(input)
		sendToWebhook(output)
	}
}

// Transform to Desired Format
func transformData(input *InputData) *OutputData {
	output := &OutputData{
		Event:           input.Ev,
		EventType:       input.Et,
		AppID:           input.ID,
		UserID:          input.UID,
		MessageID:       input.MID,
		PageTitle:       input.T,
		PageURL:         input.P,
		BrowserLanguage: input.L,
		ScreenSize:      input.SC,
		Attributes:      input.Attributes,
		UserTraits:      input.UserTraits,
	}
	return &output
}

func sendToWebhook(output *OutputData) {

	webhookUrl := "https://webhook.site/f90c73e4-3866-4637-93e8-81e9cb2beb36"

	payLoad, err := json.Marshal(output)
	if err != nil {
		fmt.Println("Error Marshalling  output", err)
		return
	}

	response, err := http.Post(webhookUrl+"application/json", bytes.NewBuffer(payLoad))
	if err != nil {
		fmt.Println("Error sending data to webhook", err)
		return
	}
	defer response.Body.Close()

	fmt.Println("Webhook Response", response.Status)
}
